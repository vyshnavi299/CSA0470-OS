#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

// Define the message structure
struct message {
    long mtype; // Message type (must be > 0)
    char mtext[100]; // Message data
};

int main() {
    key_t key;
    int msgid;
    struct message msg;
    size_t msg_size;

    // Generate a unique key for the message queue
    key = ftok(".", 'a');
    if (key == -1) {
        perror("ftok");
        exit(1);
    }

    // Create a message queue with read and write permissions
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget");
        exit(1);
    }

    // Send a message
    msg.mtype = 1;
    strcpy(msg.mtext, "Hello from Process A!");
    msg_size = strlen(msg.mtext) + 1;

    if (msgsnd(msgid, &msg, msg_size, 0) == -1) {
        perror("msgsnd");
        exit(1);
    }

    printf("Message sent: %s\n", msg.mtext);

    // Receive a message
    if (msgrcv(msgid, &msg, sizeof(msg.mtext), 2, 0) == -1) {
        perror("msgrcv");
        exit(1);
    }

    printf("Message received: %s\n", msg.mtext);

    // Remove the message queue
    if (msgctl(msgid, IPC_RMID, NULL) == -1) {
        perror("msgctl");
        exit(1);
    }

    return 0;
}

